using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nameless.Libraries.Rukia.ProjectEuler
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    /// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class EvenFibonacciSum
    {
        /// <summary>
        /// The sum limit
        /// </summary>
        public int Limit;
        /// <summary>
        /// The Number factors
        /// </summary>
        public List<int> Factors;
        /// <summary>
        /// The multple sum result
        /// </summary>
        public int Result { get { return Solve(); } }
        /// <summary>
        /// Generate the fibonnaci sum of even numbers that not exceed the superiorLimit
        /// </summary>
        /// <param name="SuperiorLimit">The terms had to be below this limit</param>
        public EvenFibonacciSum(int superiorLimit = 4000000)
        {
            this.Limit = superiorLimit;
        }
        /// <summary>
        /// Solve the problem
        /// </summary>
        /// <returns>The sum result</returns>
        private int Solve()
        {
            int currentTerm = 1,
                nextTerm = 1,
                res = 0;
            this.Factors = new List<int>();
            while (currentTerm < this.Limit)
            {
                nextTerm = nextTerm + currentTerm;
                currentTerm = nextTerm - currentTerm;
                if (currentTerm.IsEven())
                {
                    res += currentTerm;
                    Factors.Add(currentTerm);
                }
            }
            return res;
        }
        /// <summary>
        /// Print the result
        /// </summary>
        /// <returns>The result</returns>
        public override string ToString()
        {
            return String.Format("The sum of all even term in the Fibonacci sequence whose values do not exceed four million {0} is {1}", this.Limit, this.Result);
        }
        //Small Solution
        ///// <summary>
        ///// Solve the problem
        ///// </summary>
        ///// <returns>The sum result</returns>
        //private int Solve()
        //{
        //    const int LIMIT = 4000000;
        //    int currentTerm = 1,
        //        nextTerm = 1,
        //        res = 0;
        //    while (currentTerm < LIMIT)
        //    {
        //        nextTerm = nextTerm + currentTerm;
        //        currentTerm = nextTerm - currentTerm;
        //        if (currentTerm % 2 == 0)
        //            res += currentTerm;
        //    }
        //    return res;
        //}

    }
    /// <summary>
    /// Create extended methods for the Double
    /// </summary>
    public static class ExtendedDouble
    {
        /// <summary>
        /// Test if a number is even
        /// </summary>
        /// <param name="number">The number to be tested</param>
        /// <returns>True if the number is even</returns>
        public static Boolean IsEven(this int number)
        {
            return number % 2 == 0;
        }
    }
}
