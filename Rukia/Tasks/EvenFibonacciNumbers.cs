using Nameless.Libraries.Rukia.ProjectEuler.Helper.Interface;
using Nameless.Libraries.Rukia.ProjectEuler.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nameless.Libraries.Rukia.ProjectEuler.Tasks
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class EvenFibonacciNumbers : ISolution
    {
        /// <summary>
        /// The sum limit
        /// </summary>
        public int Limit;

        /// <summary>
        /// The task result
        /// </summary>
        public int Result;

        /// <summary>
        /// Generate the fibonnaci sum of even numbers that not exceed the superiorLimit
        /// </summary>
        /// <param name="SuperiorLimit">The terms had to be below this limit</param>
        public EvenFibonacciNumbers(int limit)
        {
            this.Limit = limit;
            this.Result = this.Solve();
        }

        public string PrintResult()
        {
            return String.Format("The sum of all even term in the Fibonacci sequence whose values do not exceed four million {0} is {1}", this.Limit, this.Result);
        }

        public int Solve()
        {
            int sum = 0;
            int term = 1, prev = 1, tmp;
            try
            {
                while (term < this.Limit)
                {
                    tmp = term;
                    term = term + prev;
                    prev = tmp;
                    if (term.IsEven() && term < this.Limit)
                        sum += term;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
            return sum;
        }
    }
}
