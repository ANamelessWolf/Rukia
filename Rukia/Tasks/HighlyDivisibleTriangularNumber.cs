using Nameless.Libraries.Rukia.ProjectEuler.Helper.Interface;
using Nameless.Libraries.Rukia.ProjectEuler.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nameless.Libraries.Rukia.ProjectEuler.Tasks
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///     1: 1
    ///     3: 1,3
    ///     6: 1,2,3,6
    ///    10: 1,2,5,10
    ///    15: 1,3,5,15
    ///    21: 1,3,7,21
    ///    28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class HighlyDivisibleTriangularNumber : ILongSolution
    {
        public int Limit { get; }
        public long Number { get; }
        public PrimeTester PrimeTester { get; }

        public HighlyDivisibleTriangularNumber(int limit)
        {
            this.Limit = limit;
            this.PrimeTester = new PrimeTester();
            this.Number = this.Solve();
        }

        public string PrintResult()
        {
            return String.Format("The value of the first triangle number to have over 500 divisors is {0}", this.Number);
        }

        public long Solve()
        {
            int divisorCount = 0, search = 1;
            long tNumber = 0;

            while (divisorCount < this.Limit)
            {
                tNumber = search.GetTriangleNumber();
                divisorCount = tNumber.CountFactors(PrimeTester);
                search++;
            }
            return tNumber;
        }
    }
}
